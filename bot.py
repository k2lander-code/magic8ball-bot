import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import time
import random
import os
import requests
import threading
from flask import Flask

app = Flask(__name__)

BOT_TOKEN = os.getenv('BOT_TOKEN')
HF_API_TOKEN = os.getenv('HF_API_TOKEN')

if not BOT_TOKEN:
    print("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    exit(1)

bot = telebot.TeleBot(BOT_TOKEN)

YES_NO_BASE = [
    '–î–∞, –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ! ‚ú®',
    '–ù–µ—Ç, –Ω–µ —Å—É–¥—å–±–∞. üòî', 
    '–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–¥–æ–∂–¥–∏. ‚è≥',
    '–ê–±—Å–æ–ª—é—Ç–Ω–æ –≤–µ—Ä–Ω–æ! üëç',
    '–°–∫–æ—Ä–µ–µ –Ω–µ—Ç. ‚ùå',
    '–í–µ—Ä–æ—è—Ç–Ω–æ –¥–∞! üòä',
    '–ù–µ –∑–Ω–∞—é, –Ω–æ –≤–µ—Ä—é –≤ —Ç–µ–±—è. ‚ù§Ô∏è'
]

user_locks = {}

def get_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    button = KeyboardButton('üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –≤—Å–µ–ª–µ–Ω–Ω—É—é')
    markup.add(button)
    return markup

def test_huggingface_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏"""
    if not HF_API_TOKEN:
        return False, "‚ùå –¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏
    test_models = [
        "gpt2",                          # –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å - –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
        "distilgpt2",                    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è GPT-2
        "microsoft/DialoGPT-small",      # –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
        "facebook/blenderbot-400M-distill"
    ]
    
    for model in test_models:
        try:
            API_URL = f"https://api-inference.huggingface.co/models/{model}"
            headers = {"Authorization": f"Bearer {HF_API_TOKEN}"}
            
            payload = {
                "inputs": "–°–∫–∞–∂–∏ –ø—Ä–∏–≤–µ—Ç",
                "parameters": {"max_length": 10}
            }
            
            print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º: {model}")
            response = requests.post(API_URL, headers=headers, json=payload, timeout=10)
            
            if response.status_code == 200:
                result = response.json()
                if isinstance(result, list) and len(result) > 0:
                    answer = result[0]['generated_text'].strip()
                    return True, f"‚úÖ {model} —Ä–∞–±–æ—Ç–∞–µ—Ç: {answer}"
            elif response.status_code == 503:
                return False, f"üîÑ {model} –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è... –ü–æ–¥–æ–∂–¥–∏ 1-2 –º–∏–Ω—É—Ç—ã"
                
        except Exception as e:
            print(f"‚ùå {model}: {e}")
            continue
    
    return False, "‚ùå –í—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã."

def get_huggingface_prediction(question):
    """–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å GPT-2"""
    if not HF_API_TOKEN:
        return random.choice(YES_NO_BASE)
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º GPT-2 - —Ç–æ—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
        API_URL = "https://api-inference.huggingface.co/models/gpt2"
        headers = {"Authorization": f"Bearer {HF_API_TOKEN}"}
        
        # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        prompt = f"Q: {question} A:"
        
        payload = {
            "inputs": prompt,
            "parameters": {
                "max_length": 80,
                "temperature": 0.9,
                "do_sample": True,
            }
        }
        
        print(f"üîÑ –ó–∞–ø—Ä–æ—Å –∫ GPT-2: '{question}'")
        response = requests.post(API_URL, headers=headers, json=payload, timeout=30)
        
        print(f"üì° –°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"üìä –û—Ç–≤–µ—Ç: {result}")
            
            if isinstance(result, list) and len(result) > 0:
                answer = result[0]['generated_text'].strip()
                # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–ø—Ç
                if prompt in answer:
                    answer = answer.replace(prompt, '').strip()
                
                if answer and len(answer) > 3:
                    # –ü–µ—Ä–µ–≤–æ–¥–∏–º/–∞–¥–∞–ø—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                    russian_answer = translate_to_russian(answer)
                    return russian_answer
            
        return random.choice(YES_NO_BASE)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return random.choice(YES_NO_BASE)

def translate_to_russian(text):
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π"""
    # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    translations = {
        "yes": "–¥–∞", "no": "–Ω–µ—Ç", "maybe": "–≤–æ–∑–º–æ–∂–Ω–æ",
        "certainly": "–∫–æ–Ω–µ—á–Ω–æ", "probably": "–≤–µ—Ä–æ—è—Ç–Ω–æ",
        "hello": "–ø—Ä–∏–≤–µ—Ç", "love": "–ª—é–±–æ–≤—å", "future": "–±—É–¥—É—â–µ–µ"
    }
    
    text_lower = text.lower()
    for eng, rus in translations.items():
        if eng in text_lower:
            return text.replace(eng, rus).capitalize()
    
    return text

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    user_locks[user_id] = 0
    bot.send_message(
        message.chat.id, 
        "üîÆ *–ü—Ä–∏–≤–µ—Ç! –Ø –º–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä!*\n\n–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º!", 
        parse_mode='Markdown', 
        reply_markup=get_keyboard()
    )

@bot.message_handler(commands=['test_ai'])
def test_ai(message):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–ò"""
    connection_ok, connection_msg = test_huggingface_connection()
    
    if connection_ok:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        question = "Will I find love this year?"
        answer = get_huggingface_prediction(question)
        
        if answer in YES_NO_BASE:
            response = f"‚ùå –ò–ò –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª\n{connection_msg}"
        else:
            response = f"‚úÖ –ò–ò –†–ê–ë–û–¢–ê–ï–¢!\n{connection_msg}\nü§ñ –û—Ç–≤–µ—Ç: {answer}"
    else:
        response = f"‚ùå –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n{connection_msg}"
    
    bot.send_message(message.chat.id, response, parse_mode='Markdown')

@bot.message_handler(commands=['test_english'])
def test_english(message):
    """–¢–µ—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º"""
    bot.send_message(message.chat.id, "üß™ *Testing AI with English...*", parse_mode='Markdown')
    
    questions = [
        "Will it rain tomorrow?",
        "Should I learn programming?",
        "What is my future?"
    ]
    
    question = random.choice(questions)
    answer = get_huggingface_prediction(question)
    
    bot.send_message(message.chat.id, f"‚ùì *Q:* {question}\nü§ñ *A:* {answer}", parse_mode='Markdown')

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.from_user.id
    current_time = time.time()
    
    if user_id in user_locks and current_time - user_locks[user_id] < 10:
        remaining = int(10 - (current_time - user_locks[user_id]))
        bot.send_message(message.chat.id, f"‚è≥ –ü–æ–¥–æ–∂–¥–∏ {remaining} —Å–µ–∫...", parse_mode='Markdown')
        return
    
    if message.text == 'üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –≤—Å–µ–ª–µ–Ω–Ω—É—é':
        question = "What will happen today?"
    else:
        question = message.text
    
    user_locks[user_id] = current_time
    
    bot.send_message(message.chat.id, "üîÆ Shaking the ball...", parse_mode='Markdown')
    time.sleep(2)
    
    if question != "What will happen today?":
        answer = get_huggingface_prediction(question)
    else:
        answer = random.choice(YES_NO_BASE)
    
    bot.send_message(message.chat.id, f"üîÆ {answer}", parse_mode='Markdown')
    time.sleep(1)
    bot.send_message(message.chat.id, "Ready for new questions! üöÄ", reply_markup=get_keyboard())

@app.route('/')
def home():
    connection_ok, connection_msg = test_huggingface_connection()
    return f"""
    <html>
        <head><title>Magic Ball</title></head>
        <body>
            <h1>üîÆ Magic Ball</h1>
            <p>{connection_msg}</p>
            <p>Using GPT-2 model</p>
        </body>
    </html>
    """

def start_bot_polling():
    print("üîÆ Starting bot...")
    while True:
        try:
            bot.polling(none_stop=True, interval=1)
        except Exception as e:
            print(f"‚ùå Error: {e}")
            time.sleep(10)

if __name__ == '__main__':
    print("üîÆ Magic Ball Started!")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    connection_ok, connection_msg = test_huggingface_connection()
    print(f"üì° {connection_msg}")
    
    bot_thread = threading.Thread(target=start_bot_polling, daemon=True)
    bot_thread.start()
    
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port, debug=False)
