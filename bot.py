import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import time
import random
import os
import requests

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
HF_API_TOKEN = os.getenv('HF_API_TOKEN')  # –¢–≤–æ–π —Ç–æ–∫–µ–Ω test4

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
if not BOT_TOKEN:
    print("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    exit(1)

if not HF_API_TOKEN:
    print("‚ö†Ô∏è HF_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã")

bot = telebot.TeleBot(BOT_TOKEN)

YES_NO_BASE = [
    '–î–∞, –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ! ‚ú®',
    '–ù–µ—Ç, –Ω–µ —Å—É–¥—å–±–∞. üòî', 
    '–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–¥–æ–∂–¥–∏. ‚è≥',
    '–ê–±—Å–æ–ª—é—Ç–Ω–æ –≤–µ—Ä–Ω–æ! üëç',
    '–°–∫–æ—Ä–µ–µ –Ω–µ—Ç. ‚ùå',
    '–í–µ—Ä–æ—è—Ç–Ω–æ –¥–∞! üòä',
    '–ù–µ –∑–Ω–∞—é, –Ω–æ –≤–µ—Ä—é –≤ —Ç–µ–±—è. ‚ù§Ô∏è'
]

user_locks = {}

def get_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    button = KeyboardButton('üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –≤—Å–µ–ª–µ–Ω–Ω—É—é')
    markup.add(button)
    return markup

def get_huggingface_prediction(question):
    """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Hugging Face Inference API"""
    if not HF_API_TOKEN:
        return random.choice(YES_NO_BASE)
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º DialoGPT-medium - —Ö–æ—Ä–æ—à –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
        API_URL = "https://api-inference.huggingface.co/models/microsoft/DialoGPT-medium"
        headers = {"Authorization": f"Bearer {HF_API_TOKEN}"}
        
        # –ü—Ä–æ–º–ø—Ç –¥–ª—è –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ —à–∞—Ä–∞
        prompt = f"–¢—ã - –º–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π. –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –∏ –º–∏—Å—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å: '{question}'. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 15 —Å–ª–æ–≤."
        
        payload = {
            "inputs": prompt,
            "parameters": {
                "max_length": 80,
                "temperature": 0.9,
                "do_sample": True,
                "return_full_text": False
            },
            "options": {
                "wait_for_model": True  # –ñ–¥–µ–º –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
            }
        }
        
        print(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Hugging Face: {question[:30]}...")
        response = requests.post(API_URL, headers=headers, json=payload, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Hugging Face –æ—Ç–≤–µ—Ç: {result}")
            
            if isinstance(result, list) and len(result) > 0:
                answer = result[0]['generated_text'].strip()
                # –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
                if prompt in answer:
                    answer = answer.replace(prompt, '').strip()
                return answer if answer else random.choice(YES_NO_BASE)
            else:
                return random.choice(YES_NO_BASE)
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
            return random.choice(YES_NO_BASE)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Hugging Face: {e}")
        return random.choice(YES_NO_BASE)

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    user_locks[user_id] = 0
    bot.send_message(
        message.chat.id, 
        "üîÆ *–ü—Ä–∏–≤–µ—Ç! –Ø –º–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä!*\n–°–ø—Ä–æ—Å–∏ —á—Ç–æ —É–≥–æ–¥–Ω–æ ‚Äî —è –¥–∞–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ!", 
        parse_mode='Markdown', 
        reply_markup=get_keyboard()
    )

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.from_user.id
    current_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞
    if user_id in user_locks and current_time - user_locks[user_id] < 10:
        remaining = int(10 - (current_time - user_locks[user_id]))
        bot.send_message(message.chat.id, f"‚è≥ –ü–æ–¥–æ–∂–¥–∏ {remaining} —Å–µ–∫...", parse_mode='Markdown')
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
    question = "–ß—Ç–æ —à–µ–ø–Ω—ë—Ç –≤—Å–µ–ª–µ–Ω–Ω–∞—è —Å–µ–≥–æ–¥–Ω—è?" if message.text == 'üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –≤—Å–µ–ª–µ–Ω–Ω—É—é' else message.text
    
    user_locks[user_id] = current_time
    
    # –¢—Ä—è—Å–µ–º —à–∞—Ä
    bot.send_message(message.chat.id, "üîÆ –¢—Ä—è—Å—ë–º —à–∞—Ä... –®-—à-—à...", parse_mode='Markdown')
    time.sleep(2)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
    word_count = len(question.split())
    if word_count <= 7 and random.random() > 0.3:
        answer = random.choice(YES_NO_BASE)
        print(f"üé≤ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç: {answer}")
    else:
        answer = get_huggingface_prediction(question)
        print(f"ü§ñ AI –æ—Ç–≤–µ—Ç: {answer}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    bot.send_message(message.chat.id, f"üîÆ *{answer}*", parse_mode='Markdown')
    time.sleep(1)
    bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É! üöÄ", reply_markup=get_keyboard())

if __name__ == '__main__':
    print("üîÆ –ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä –∑–∞–ø—É—â–µ–Ω!")
    print(f"ü§ñ Hugging Face: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if HF_API_TOKEN else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    bot.polling(none_stop=True)
