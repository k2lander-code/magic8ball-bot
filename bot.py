import telebot
import time
import random
import requests
import os
import threading
from flask import Flask

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (Render Environment Variables) ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
HUGGINGFACE_TOKEN = os.getenv("HUGGINGFACE_TOKEN")

bot = telebot.TeleBot(TELEGRAM_TOKEN)
app = Flask(__name__)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Hugging Face ===
API_URL = "https://api-inference.huggingface.co/models/meta-llama/Llama-3-8b-instruct"
headers = lambda: {"Authorization": f"Bearer {HUGGINGFACE_TOKEN}"}

def get_huggingface_response(prompt):
    try:
        payload = {"inputs": prompt, "parameters": {"max_new_tokens": 80}}
        response = requests.post(API_URL, headers=headers(), json=payload, timeout=30)
        if response.status_code == 200:
            data = response.json()
            return data[0]["generated_text"].strip()
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Hugging Face: {response.status_code}"
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"

# === –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç (–µ—Å–ª–∏ Hugging Face –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç) ===
def get_simple_ai_response(question):
    responses = [
        "–°—É–¥—å–±–∞ —Ö—Ä–∞–Ω–∏—Ç —Å–≤–æ–∏ —Ç–∞–π–Ω—ã...",
        "–ë—É–¥—É—â–µ–µ –≥–æ—Ç–æ–≤–∏—Ç —Ç–µ–±–µ –ø—Ä–∏—è—Ç–Ω—ã–π —Å—é—Ä–ø—Ä–∏–∑!",
        "–í—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ, –µ—Å–ª–∏ —Ç—ã –≤–µ—Ä–∏—à—å!"
    ]
    return random.choice(responses)

# === Telegram-–±–æ—Ç ===
user_locks = {}

def get_keyboard():
    from telebot import types
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –≤—Å–µ–ª–µ–Ω–Ω—É—é"))
    return keyboard

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "üîÆ –ü—Ä–∏–≤–µ—Ç! –Ø –º–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º!", parse_mode='Markdown')
    question = random.choice([
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç?",
        "–ö–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è –∂–∏–∑–Ω—å –Ω–∞ –ú–∞—Ä—Å–µ?",
        "–ß—Ç–æ –∂–¥–µ—Ç –º–µ–Ω—è –≤ –±—É–¥—É—â–µ–º?"
    ])
    answer = get_huggingface_response(question)
    bot.send_message(message.chat.id, f"‚ùì {question}\nü§ñ {answer}", parse_mode='Markdown', reply_markup=get_keyboard())

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.from_user.id
    current_time = time.time()
    if user_id in user_locks and current_time - user_locks[user_id] < 10:
        remaining = int(10 - (current_time - user_locks[user_id]))
        bot.send_message(message.chat.id, f"‚è≥ –ü–æ–¥–æ–∂–¥–∏ {remaining} —Å–µ–∫...", parse_mode='Markdown')
        return

    user_locks[user_id] = current_time
    question = "–ß—Ç–æ –∂–¥–µ—Ç –º–µ–Ω—è –≤ –±—É–¥—É—â–µ–º?" if message.text == 'üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –≤—Å–µ–ª–µ–Ω–Ω—É—é' else message.text

    bot.send_message(message.chat.id, "üîÆ –¢—Ä—è—Å—É —à–∞—Ä...", parse_mode='Markdown')
    time.sleep(2)

    answer = get_huggingface_response(question)
    if "–û—à–∏–±–∫–∞" in answer:
        answer = get_simple_ai_response(question)

    bot.send_message(message.chat.id, f"üîÆ {answer}", parse_mode='Markdown')
    bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–∞–º! üöÄ", reply_markup=get_keyboard())

# === Flask –≤–µ–±-—Å–µ—Ä–≤–µ—Ä (—á—Ç–æ–±—ã Render –Ω–µ –∑–∞—Å—ã–ø–∞–ª) ===
@app.route('/')
def home():
    return "ü§ñ Telegram Bot is running on Render!"

def run_flask():
    app.run(host='0.0.0.0', port=int(os.getenv('PORT', 5000)))

def run_telegram():
    bot.infinity_polling(timeout=60, long_polling_timeout=30)

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ Flask –∏ Telegram –±–æ—Ç–∞...")
    threading.Thread(target=run_telegram).start()
    run_flask()
