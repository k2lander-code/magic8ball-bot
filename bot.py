import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from openai import OpenAI
import time
import random
import os

# –¢–û–õ–¨–ö–û –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è - –±–µ–∑ fallback –∑–Ω–∞—á–µ–Ω–∏–π!
BOT_TOKEN = os.getenv('BOT_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

client = OpenAI(api_key=OPENAI_API_KEY)
bot = telebot.TeleBot(BOT_TOKEN)

YES_NO_BASE = [
    '–î–∞, –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ! ‚ú®',
    '–ù–µ—Ç, –Ω–µ —Å—É–¥—å–±–∞. üòî',
    '–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–¥–æ–∂–¥–∏. ‚è≥',
    '–ê–±—Å–æ–ª—é—Ç–Ω–æ –≤–µ—Ä–Ω–æ! üëç',
    '–°–∫–æ—Ä–µ–µ –Ω–µ—Ç. ‚ùå',
    '–í–µ—Ä–æ—è—Ç–Ω–æ –¥–∞! üòä',
    '–ù–µ –∑–Ω–∞—é, –Ω–æ –≤–µ—Ä—é –≤ —Ç–µ–±—è. ‚ù§Ô∏è'
]

user_locks = {}

def get_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    button = KeyboardButton('üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –≤—Å–µ–ª–µ–Ω–Ω—É—é')
    markup.add(button)
    return markup

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    user_locks[user_id] = 0
    bot.send_message(message.chat.id, 
                     "üîÆ *–ü—Ä–∏–≤–µ—Ç, –∏—Å–∫–∞—Ç–µ–ª—å —Ç–∞–π–Ω!*\n–°–ø—Ä–æ—Å–∏ —á—Ç–æ —É–≥–æ–¥–Ω–æ ‚Äî —è –¥–∞–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏–∑ —à–∞—Ä–∞.\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å.", 
                     parse_mode='Markdown', reply_markup=get_keyboard())

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.from_user.id
    if user_id in user_locks and time.time() - user_locks[user_id] < 10:
        bot.send_message(message.chat.id, "‚è≥ *–ü–æ–¥–æ–∂–¥–∏, –≤—Å–µ–ª–µ–Ω–Ω–∞—è –µ—â—ë –¥—É–º–∞–µ—Ç... –ù–µ —Ç–æ—Ä–æ–ø–∏ —Å—É–¥—å–±—É!*" , parse_mode='Markdown')
        return
    
    if message.text == 'üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –≤—Å–µ–ª–µ–Ω–Ω—É—é':
        question = "–ß—Ç–æ —à–µ–ø–Ω—ë—Ç –≤—Å–µ–ª–µ–Ω–Ω–∞—è —Å–µ–≥–æ–¥–Ω—è?"
    else:
        question = message.text
    
    user_locks[user_id] = time.time()
    
    bot.send_message(message.chat.id, "üîÆ *–¢—Ä—è—Å—ë–º —à–∞—Ä... –î–µ—Ä–∂–∏—Å—å! –®-—à-—à...* üîÆ", parse_mode='Markdown')
    time.sleep(2)
    
    word_count = len(question.split())
    if word_count <= 7 and random.random() > 0.3:
        answer = random.choice(YES_NO_BASE)
    else:
        try:
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": f"–¢—ã ‚Äî –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —à–∞—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π. –î–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π, —é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç –¥–æ 25 —Å–ª–æ–≤ –Ω–∞: '{question}'. –°–¥–µ–ª–∞–π –∫–∞–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å—É–¥—å–±—ã."}]
            )
            full_answer = response.choices[0].message.content.strip()
            answer = full_answer[:25] + "..." if len(full_answer) > 25 else full_answer
        except Exception as e:
            answer = "–í—Å–µ–ª–µ–Ω–Ω–∞—è –º–æ–ª—á–∏—Ç... –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ. üîÆ"
    
    words = answer.split()
    if len(words) <= 7:
        bot.send_message(message.chat.id, f"üîÆ *{answer}* üîÆ", parse_mode='Markdown')
    else:
        for i in range(0, len(words), 7):
            chunk = ' '.join(words[i:i+7])
            bot.send_message(message.chat.id, f"üîÆ *{chunk}* üîÆ", parse_mode='Markdown')
            if i + 7 < len(words):
                time.sleep(5)
    
    time.sleep(1)
    bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É! üöÄ", reply_markup=get_keyboard())

if __name__ == '__main__':
    while True:
        try:
            print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
            bot.polling(none_stop=True)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            time.sleep(15)
