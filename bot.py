import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import time
import random
import os
import requests
import threading
from flask import Flask
import json

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –¥–ª—è Web Service
app = Flask(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
HF_API_TOKEN = os.getenv('HF_API_TOKEN')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
if not BOT_TOKEN:
    print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    exit(1)

print(f"‚úÖ BOT_TOKEN: {BOT_TOKEN[:10]}...{BOT_TOKEN[-5:] if len(BOT_TOKEN) > 15 else ''}")
print(f"‚úÖ HF_API_TOKEN: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if HF_API_TOKEN else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")

bot = telebot.TeleBot(BOT_TOKEN)

YES_NO_BASE = [
    '–î–∞, –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ! ‚ú®',
    '–ù–µ—Ç, –Ω–µ —Å—É–¥—å–±–∞. üòî', 
    '–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–¥–æ–∂–¥–∏. ‚è≥',
    '–ê–±—Å–æ–ª—é—Ç–Ω–æ –≤–µ—Ä–Ω–æ! üëç',
    '–°–∫–æ—Ä–µ–µ –Ω–µ—Ç. ‚ùå',
    '–í–µ—Ä–æ—è—Ç–Ω–æ –¥–∞! üòä',
    '–ù–µ –∑–Ω–∞—é, –Ω–æ –≤–µ—Ä—é –≤ —Ç–µ–±—è. ‚ù§Ô∏è'
]

user_locks = {}

def get_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    button = KeyboardButton('üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –≤—Å–µ–ª–µ–Ω–Ω—É—é')
    markup.add(button)
    return markup

def test_huggingface_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Hugging Face"""
    if not HF_API_TOKEN:
        return False, "‚ùå –¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    try:
        API_URL = "https://api-inference.huggingface.co/models/microsoft/DialoGPT-medium"
        headers = {"Authorization": f"Bearer {HF_API_TOKEN}"}
        
        test_prompt = "–û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: –ø—Ä–∏–≤–µ—Ç"
        payload = {
            "inputs": test_prompt,
            "parameters": {"max_length": 10, "temperature": 0.7}
        }
        
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Hugging Face...")
        response = requests.post(API_URL, headers=headers, json=payload, timeout=30)
        
        print(f"üì° –°—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∞: {response.status_code}")
        print(f"üìÑ –û—Ç–≤–µ—Ç —Ç–µ—Å—Ç–∞: {response.text[:200]}...")
        
        if response.status_code == 200:
            result = response.json()
            if isinstance(result, list) and len(result) > 0:
                answer = result[0]['generated_text'].strip()
                return True, f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {answer}"
            else:
                return False, f"‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç: {result}"
        else:
            return False, f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}"
            
    except Exception as e:
        return False, f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"

def get_huggingface_prediction(question):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏ –Ω–∞–¥–µ–∂–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Hugging Face"""
    if not HF_API_TOKEN:
        return random.choice(YES_NO_BASE)
    
    try:
        API_URL = "https://api-inference.huggingface.co/models/microsoft/DialoGPT-medium"
        headers = {"Authorization": f"Bearer {HF_API_TOKEN}"}
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç
        prompt = f"–í–æ–ø—Ä–æ—Å: {question}\n–û—Ç–≤–µ—Ç:"
        
        payload = {
            "inputs": prompt,
            "parameters": {
                "max_length": 50,
                "temperature": 0.8,
                "do_sample": True,
            }
        }
        
        print(f"üîÑ –ó–∞–ø—Ä–æ—Å –∫ Hugging Face: '{question}'")
        start_time = time.time()
        
        response = requests.post(API_URL, headers=headers, json=payload, timeout=30)
        response_time = time.time() - start_time
        
        print(f"üì° –°—Ç–∞—Ç—É—Å: {response.status_code}, –í—Ä–µ–º—è: {response_time:.2f}—Å")
        
        if response.status_code == 200:
            result = response.json()
            print(f"üìä Raw –æ—Ç–≤–µ—Ç: {result}")
            
            if isinstance(result, list) and len(result) > 0:
                answer = result[0]['generated_text'].strip()
                # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞
                if prompt in answer:
                    answer = answer.replace(prompt, '').strip()
                
                if answer and len(answer) > 3:
                    print(f"üéØ –ß–∏—Å—Ç—ã–π –æ—Ç–≤–µ—Ç: '{answer}'")
                    return answer
                else:
                    print("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç")
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞")
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            print(f"‚ùå –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {response.text}")
            
        return random.choice(YES_NO_BASE)
            
    except requests.exceptions.Timeout:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ Hugging Face")
        return random.choice(YES_NO_BASE)
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
        return random.choice(YES_NO_BASE)

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    user_locks[user_id] = 0
    bot.send_message(
        message.chat.id, 
        "üîÆ *–ü—Ä–∏–≤–µ—Ç! –Ø –º–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π!*\n\n–ó–∞–¥–∞–π –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –æ—Ç–∫—Ä–æ—é —Ç–∞–π–Ω—ã –≤—Å–µ–ª–µ–Ω–Ω–æ–π!", 
        parse_mode='Markdown', 
        reply_markup=get_keyboard()
    )

@bot.message_handler(commands=['test_ai'])
def test_ai(message):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ò–ò —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    test_questions = [
        "–°—Ç–æ–∏—Ç –ª–∏ –º–Ω–µ —É—á–∏—Ç—å Python?",
        "–ß—Ç–æ –∂–¥–µ—Ç –º–µ–Ω—è —Å–µ–≥–æ–¥–Ω—è?", 
        "–ö–∞–∫–æ–π —Å–æ–≤–µ—Ç –¥–∞—Å—Ç –≤—Å–µ–ª–µ–Ω–Ω–∞—è?",
        "–°—Ç–æ–∏—Ç –ª–∏ –¥–æ–≤–µ—Ä—è—Ç—å –∏–Ω—Ç—É–∏—Ü–∏–∏?"
    ]
    
    question = random.choice(test_questions)
    
    # –°–Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    bot.send_message(message.chat.id, f"üîç *–¢–µ—Å—Ç–∏—Ä—É–µ–º –ò–ò...*\n–í–æ–ø—Ä–æ—Å: _{question}_", parse_mode='Markdown')
    time.sleep(1)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    connection_ok, connection_msg = test_huggingface_connection()
    bot.send_message(message.chat.id, f"üì° *–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:*\n{connection_msg}", parse_mode='Markdown')
    
    if connection_ok:
        time.sleep(1)
        answer = get_huggingface_prediction(question)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞
        if answer in YES_NO_BASE:
            answer_type = "‚ùå –°–õ–£–ß–ê–ô–ù–´–ô –æ—Ç–≤–µ—Ç (–ò–ò –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª)"
        else:
            answer_type = "‚úÖ –û–¢–í–ï–¢ –ò–ò (—Ä–∞–±–æ—Ç–∞–µ—Ç!)"
        
        bot.send_message(message.chat.id, f"ü§ñ *–û—Ç–≤–µ—Ç:* {answer}\n\n{answer_type}", parse_mode='Markdown')
    else:
        bot.send_message(message.chat.id, "‚ùå *–ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.* –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã.", parse_mode='Markdown')

@bot.message_handler(commands=['debug'])
def debug_info(message):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    connection_ok, connection_msg = test_huggingface_connection()
    
    info = f"""
üîß *–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞:*

*Hugging Face:*
‚Ä¢ –¢–æ–∫–µ–Ω: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if HF_API_TOKEN else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {connection_msg}

*–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∞:*
‚Ä¢ `/test_ai` - –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ò–ò
‚Ä¢ `/simple_test` - –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
‚Ä¢ `–õ—é–±–æ–π –≤–æ–ø—Ä–æ—Å` - –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ

*–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:*
1. "–°—Ç–æ–∏—Ç –ª–∏ –º–Ω–µ —Ä–∏—Å–∫–Ω—É—Ç—å?"
2. "–ß—Ç–æ –∂–¥–µ—Ç –º–µ–Ω—è –∑–∞–≤—Ç—Ä–∞?"
3. "–ö–∞–∫–æ–π —Å–æ–≤–µ—Ç –¥–∞—Å—Ç –∑–≤–µ–∑–¥—ã?"
    """
    bot.send_message(message.chat.id, info, parse_mode='Markdown')

@bot.message_handler(commands=['simple_test'])
def simple_test(message):
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–º"""
    bot.send_message(message.chat.id, "üß™ *–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç...*", parse_mode='Markdown')
    
    answer = get_huggingface_prediction("–ü—Ä–∏–≤–µ—Ç")
    
    if answer in YES_NO_BASE:
        bot.send_message(message.chat.id, f"‚ùå *–ò–ò –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:* {answer}", parse_mode='Markdown')
    else:
        bot.send_message(message.chat.id, f"‚úÖ *–ò–ò —Ä–∞–±–æ—Ç–∞–µ—Ç:* {answer}", parse_mode='Markdown')

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.from_user.id
    current_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞
    if user_id in user_locks and current_time - user_locks[user_id] < 10:
        remaining = int(10 - (current_time - user_locks[user_id]))
        bot.send_message(message.chat.id, f"‚è≥ *–ü–æ–¥–æ–∂–¥–∏ –µ—â–µ {remaining} —Å–µ–∫...*", parse_mode='Markdown')
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
    if message.text == 'üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –≤—Å–µ–ª–µ–Ω–Ω—É—é':
        question = "–ß—Ç–æ —à–µ–ø–Ω—ë—Ç –≤—Å–µ–ª–µ–Ω–Ω–∞—è —Å–µ–≥–æ–¥–Ω—è?"
    else:
        question = message.text
    
    user_locks[user_id] = current_time
    
    bot.send_message(message.chat.id, "üîÆ *–¢—Ä—è—Å—ë–º —à–∞—Ä...*", parse_mode='Markdown')
    time.sleep(2)
    
    # –í—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ò–ò –¥–ª—è –Ω–∞—Å—Ç–æ—è—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    if question != "–ß—Ç–æ —à–µ–ø–Ω—ë—Ç –≤—Å–µ–ª–µ–Ω–Ω–∞—è —Å–µ–≥–æ–¥–Ω—è?":
        answer = get_huggingface_prediction(question)
    else:
        answer = random.choice(YES_NO_BASE)
    
    bot.send_message(message.chat.id, f"üîÆ *{answer}*", parse_mode='Markdown')
    time.sleep(1)
    bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É! üöÄ", reply_markup=get_keyboard())

# Flask –º–∞—Ä—à—Ä—É—Ç—ã
@app.route('/')
def home():
    connection_ok, connection_msg = test_huggingface_connection()
    return f"""
    <html>
        <head><title>–ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä - –û—Ç–ª–∞–¥–∫–∞</title></head>
        <body>
            <h1>üîÆ –ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä - –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏</h1>
            <div style="background: #f0f0f0; padding: 20px; border-radius: 10px;">
                <h3>–°—Ç–∞—Ç—É—Å Hugging Face:</h3>
                <p>{connection_msg}</p>
                <p><strong>–¢–æ–∫–µ–Ω:</strong> {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if HF_API_TOKEN else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</p>
            </div>
        </body>
    </html>
    """

@app.route('/test_api')
def test_api():
    """Endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API"""
    connection_ok, connection_msg = test_huggingface_connection()
    return {
        'hf_token_set': bool(HF_API_TOKEN),
        'connection_ok': connection_ok,
        'connection_msg': connection_msg,
        'timestamp': time.time()
    }

def start_bot_polling():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    print("üîÆ –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞...")
    while True:
        try:
            bot.polling(none_stop=True, interval=1, timeout=60)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
            time.sleep(10)

if __name__ == '__main__':
    print("=" * 60)
    print("üîÆ –ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π - –†–ï–ñ–ò–ú –û–¢–õ–ê–î–ö–ò")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    connection_ok, connection_msg = test_huggingface_connection()
    print(f"ü§ñ Hugging Face: {connection_msg}")
    
    print("üéØ –°—Ç–∞—Ç—É—Å: –ó–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=start_bot_polling, daemon=True)
    bot_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä
    port = int(os.environ.get('PORT', 10000))
    print(f"üåç Web —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host='0.0.0.0', port=port, debug=False)
