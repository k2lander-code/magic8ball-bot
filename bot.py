import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import time
import random
import os
import requests

BOT_TOKEN = os.getenv('BOT_TOKEN')
HF_API_TOKEN = os.getenv('HF_API_TOKEN')

if not BOT_TOKEN:
    print("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    exit(1)

bot = telebot.TeleBot(BOT_TOKEN)

YES_NO_BASE = [
    '–î–∞, –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ! ‚ú®',
    '–ù–µ—Ç, –Ω–µ —Å—É–¥—å–±–∞. üòî', 
    '–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–¥–æ–∂–¥–∏. ‚è≥',
    '–ê–±—Å–æ–ª—é—Ç–Ω–æ –≤–µ—Ä–Ω–æ! üëç',
    '–°–∫–æ—Ä–µ–µ –Ω–µ—Ç. ‚ùå',
    '–í–µ—Ä–æ—è—Ç–Ω–æ –¥–∞! üòä',
    '–ù–µ –∑–Ω–∞—é, –Ω–æ –≤–µ—Ä—é –≤ —Ç–µ–±—è. ‚ù§Ô∏è'
]

user_locks = {}

def get_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    button = KeyboardButton('üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –≤—Å–µ–ª–µ–Ω–Ω—É—é')
    markup.add(button)
    return markup

def test_alternative_models():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏"""
    models_to_test = [
        "distilgpt2",
        "microsoft/DialoGPT-small", 
        "facebook/blenderbot-400M-distill",
        "EleutherAI/gpt-neo-125M",
        "google/flan-t5-small"
    ]
    
    results = []
    for model in models_to_test:
        try:
            API_URL = f"https://api-inference.huggingface.co/models/{model}"
            headers = {"Authorization": f"Bearer {HF_API_TOKEN}"}
            
            payload = {"inputs": "Hello", "parameters": {"max_length": 10}}
            response = requests.post(API_URL, headers=headers, json=payload, timeout=10)
            
            if response.status_code == 200:
                results.append(f"‚úÖ {model} - –†–ê–ë–û–¢–ê–ï–¢")
            else:
                results.append(f"‚ùå {model} - {response.status_code}")
                
        except Exception as e:
            results.append(f"‚ùå {model} - –û—à–∏–±–∫–∞")
    
    return "\n".join(results)

def get_simple_ai_response(question):
    """–ü—Ä–æ—Å—Ç–∞—è AI –ª–æ–≥–∏–∫–∞ –Ω–∞ –±–∞–∑–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª–∞—Ö"""
    question_lower = question.lower()
    
    # –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
    if any(word in question_lower for word in ['–ª—é–±–æ–≤—å', 'love', '–≤—Å—Ç—Ä–µ—á—É', 'relationship']):
        return random.choice(['–õ—é–±–æ–≤—å –∂–¥–µ—Ç —Ç–µ–±—è –∑–∞ —É–≥–ª–æ–º! ‚ù§Ô∏è', '–°–µ—Ä–¥—Ü–µ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç - –¥–∞! üíò', '–í—Å—Ç—Ä–µ—Ç–∏—à—å —Å–≤–æ—é –ø–æ–ª–æ–≤–∏–Ω–∫—É —Å–∫–æ—Ä–æ! ‚ú®'])
    
    elif any(word in question_lower for word in ['—Ä–∞–±–æ—Ç–∞', 'job', '–∫–∞—Ä—å–µ—Ä', 'career']):
        return random.choice(['–£—Å–ø–µ—Ö –≤ —Ä–∞–±–æ—Ç–µ –±–ª–∏–∑–æ–∫! üíº', '–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–µ! üöÄ', '–ö–∞—Ä—å–µ—Ä–∞ –ø–æ–π–¥–µ—Ç –≤–≤–µ—Ä—Ö! üìà'])
    
    elif any(word in question_lower for word in ['–¥–µ–Ω—å–≥–∏', 'money', '–±–æ–≥–∞—Ç', 'rich']):
        return random.choice(['–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ—Ç–æ–∫ —É—Å–∏–ª–∏–≤–∞–µ—Ç—Å—è! üí∞', '–î–µ–Ω—å–≥–∏ –∏–¥—É—Ç –∫ —Ç–µ–±–µ! üè¶', '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —É–¥–∞—á–∞ –±–ª–∏–∑–∫–∞! üí∏'])
    
    elif any(word in question_lower for word in ['–∑–¥–æ—Ä–æ–≤—å', 'health', '–±–æ–ª–µ–∑–Ω']):
        return random.choice(['–ó–¥–æ—Ä–æ–≤—å–µ –±—É–¥–µ—Ç –∫—Ä–µ–ø–∫–∏–º! üí™', '–≠–Ω–µ—Ä–≥–∏—è –ø–µ—Ä–µ–ø–æ–ª–Ω—è–µ—Ç —Ç–µ–±—è! ‚ö°', '–¢–µ–ª–æ –±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç –∑–∞ –∑–∞–±–æ—Ç—É! üåø'])
    
    elif any(word in question_lower for word in ['–ø—É—Ç–µ—à–µ—Å—Ç–≤', 'travel', '–æ—Ç–ø—É—Å–∫']):
        return random.choice(['–ù–æ–≤—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã –∂–¥—É—Ç! ‚úàÔ∏è', '–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –∑–æ–≤—É—Ç! üó∫Ô∏è', '–û—Ç–∫—Ä—ã–≤–∞–π –Ω–æ–≤—ã–µ –º–µ—Å—Ç–∞! üåç'])
    
    else:
        return random.choice(YES_NO_BASE)

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    user_locks[user_id] = 0
    bot.send_message(
        message.chat.id, 
        "üîÆ *–ü—Ä–∏–≤–µ—Ç! –Ø –º–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä!*\n\n–ó–∞–¥–∞–π –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –±—É–¥—É—â–µ–º!", 
        parse_mode='Markdown', 
        reply_markup=get_keyboard()
    )

@bot.message_handler(commands=['model_test'])
def model_test(message):
    """–¢–µ—Å—Ç –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π"""
    bot.send_message(message.chat.id, "üîç *–¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ Hugging Face...*", parse_mode='Markdown')
    
    if not HF_API_TOKEN:
        bot.send_message(message.chat.id, "‚ùå –¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", parse_mode='Markdown')
        return
    
    results = test_alternative_models()
    bot.send_message(message.chat.id, f"ü§ñ *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:*\n{results}", parse_mode='Markdown')

@bot.message_handler(commands=['smart_test'])
def smart_test(message):
    """–¢–µ—Å—Ç —É–º–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
    test_questions = [
        "–Ø –Ω–∞–π–¥—É –ª—é–±–æ–≤—å?",
        "–ë—É–¥–µ—Ç –ª–∏ —É –º–µ–Ω—è —Ö–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞?",
        "–†–∞–∑–±–æ–≥–∞—Ç–µ—é –ª–∏ —è?",
        "–ë—É–¥—É –ª–∏ —è –∑–¥–æ—Ä–æ–≤?"
    ]
    
    question = random.choice(test_questions)
    answer = get_simple_ai_response(question)
    
    bot.send_message(message.chat.id, f"üß™ *–¢–µ—Å—Ç —É–º–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:*\n‚ùì {question}\nü§ñ {answer}", parse_mode='Markdown')

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.from_user.id
    current_time = time.time()
    
    if user_id in user_locks and current_time - user_locks[user_id] < 10:
        remaining = int(10 - (current_time - user_locks[user_id]))
        bot.send_message(message.chat.id, f"‚è≥ –ü–æ–¥–æ–∂–¥–∏ {remaining} —Å–µ–∫...", parse_mode='Markdown')
        return
    
    if message.text == 'üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –≤—Å–µ–ª–µ–Ω–Ω—É—é':
        question = "–ß—Ç–æ –∂–¥–µ—Ç –º–µ–Ω—è –≤ –±—É–¥—É—â–µ–º?"
    else:
        question = message.text
    
    user_locks[user_id] = current_time
    
    bot.send_message(message.chat.id, "üîÆ –¢—Ä—è—Å—É —à–∞—Ä...", parse_mode='Markdown')
    time.sleep(2)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤–º–µ—Å—Ç–æ Hugging Face
    answer = get_simple_ai_response(question)
    bot.send_message(message.chat.id, f"üîÆ {answer}", parse_mode='Markdown')
    time.sleep(1)
    bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–∞–º! üöÄ", reply_markup=get_keyboard())

if __name__ == '__main__':
    print("üîÆ –ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä –∑–∞–ø—É—â–µ–Ω!")
    print("ü§ñ –†–µ–∂–∏–º: –£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (Hugging Face –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")
    bot.polling(none_stop=True)
