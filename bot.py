import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from openai import OpenAI
import time
import random
import os
import flask
import threading

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = flask.Flask(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
WEBHOOK_URL = os.getenv('WEBHOOK_URL')  # URL —Ç–≤–æ–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Render

# –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
if not BOT_TOKEN:
    print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    exit(1)

if not OPENAI_API_KEY:
    print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    exit(1)

print(f"‚úÖ BOT_TOKEN: {BOT_TOKEN[:10]}...{BOT_TOKEN[-5:] if len(BOT_TOKEN) > 15 else ''}")
print(f"‚úÖ OPENAI_API_KEY: {OPENAI_API_KEY[:10]}...{OPENAI_API_KEY[-5:] if len(OPENAI_API_KEY) > 15 else ''}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
bot = telebot.TeleBot(BOT_TOKEN)
client = OpenAI(api_key=OPENAI_API_KEY)

YES_NO_BASE = [
    '–î–∞, –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ! ‚ú®',
    '–ù–µ—Ç, –Ω–µ —Å—É–¥—å–±–∞. üòî',
    '–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–¥–æ–∂–¥–∏. ‚è≥',
    '–ê–±—Å–æ–ª—é—Ç–Ω–æ –≤–µ—Ä–Ω–æ! üëç',
    '–°–∫–æ—Ä–µ–µ –Ω–µ—Ç. ‚ùå',
    '–í–µ—Ä–æ—è—Ç–Ω–æ –¥–∞! üòä',
    '–ù–µ –∑–Ω–∞—é, –Ω–æ –≤–µ—Ä—é –≤ —Ç–µ–±—è. ‚ù§Ô∏è'
]

user_locks = {}

def get_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    button = KeyboardButton('üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –≤—Å–µ–ª–µ–Ω–Ω—É—é')
    markup.add(button)
    return markup

def test_openai_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI"""
    try:
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI...")
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": "–û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: —Ä–∞–±–æ—Ç–∞–µ—à—å?"}],
            max_tokens=10
        )
        answer = response.choices[0].message.content.strip()
        print(f"‚úÖ OpenAI —Ç–µ—Å—Ç: {answer}")
        return True
    except Exception as e:
        print(f"‚ùå OpenAI —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: {e}")
        return False

@app.route('/')
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã"""
    openai_status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if test_openai_connection() else "‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    return f"""
    <html>
        <head><title>–ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä</title></head>
        <body>
            <h1>üîÆ –ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π</h1>
            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> üü¢ –ê–∫—Ç–∏–≤–µ–Ω</p>
            <p><strong>OpenAI:</strong> {openai_status}</p>
            <p><strong>Telegram –±–æ—Ç:</strong> ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç</p>
            <p>–ü–µ—Ä–µ–π–¥–∏ –≤ Telegram –∏ –Ω–∞–ø–∏—à–∏ –±–æ—Ç—É!</p>
        </body>
    </html>
    """

@app.route('/webhook', methods=['POST'])
def webhook():
    """Webhook endpoint –¥–ª—è Telegram"""
    if flask.request.headers.get('content-type') == 'application/json':
        json_string = flask.request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return 'OK', 200
    else:
        flask.abort(403)

@app.route('/health')
def health_check():
    """Health check –¥–ª—è Render"""
    return {'status': 'healthy', 'service': 'magic8ball-bot'}

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    user_locks[user_id] = 0
    bot.send_message(
        message.chat.id,
        "üîÆ *–ü—Ä–∏–≤–µ—Ç, –∏—Å–∫–∞—Ç–µ–ª—å —Ç–∞–π–Ω!*\n–°–ø—Ä–æ—Å–∏ —á—Ç–æ —É–≥–æ–¥–Ω–æ ‚Äî —è –¥–∞–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏–∑ —à–∞—Ä–∞.\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å.", 
        parse_mode='Markdown', 
        reply_markup=get_keyboard()
    )

@bot.message_handler(commands=['status'])
def status(message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
    openai_working = test_openai_connection()
    status_text = "‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç!" if openai_working else "‚ö†Ô∏è OpenAI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    bot.send_message(message.chat.id, f"üîß *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:*\n{status_text}", parse_mode='Markdown')

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.from_user.id
    current_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞
    if user_id in user_locks and current_time - user_locks[user_id] < 10:
        remaining = int(10 - (current_time - user_locks[user_id]))
        bot.send_message(message.chat.id, f"‚è≥ *–ü–æ–¥–æ–∂–¥–∏ –µ—â–µ {remaining} —Å–µ–∫...*", parse_mode='Markdown')
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
    question = "–ß—Ç–æ —à–µ–ø–Ω—ë—Ç –≤—Å–µ–ª–µ–Ω–Ω–∞—è —Å–µ–≥–æ–¥–Ω—è?" if message.text == 'üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –≤—Å–µ–ª–µ–Ω–Ω—É—é' else message.text
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if len(question) > 200:
        bot.send_message(message.chat.id, "‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    user_locks[user_id] = current_time
    
    # –¢—Ä—è—Å–µ–º —à–∞—Ä
    bot.send_message(message.chat.id, "üîÆ *–¢—Ä—è—Å—ë–º —à–∞—Ä... –î–µ—Ä–∂–∏—Å—å! –®-—à-—à...* üîÆ", parse_mode='Markdown')
    time.sleep(2)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
    word_count = len(question.split())
    if word_count <= 7 and random.random() > 0.3:
        answer = random.choice(YES_NO_BASE)
        print(f"üé≤ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç: {answer}")
    else:
        answer = get_openai_prediction(question)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    bot.send_message(message.chat.id, f"üîÆ *{answer}* üîÆ", parse_mode='Markdown')
    time.sleep(1)
    bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É! üöÄ", reply_markup=get_keyboard())

def get_openai_prediction(question):
    """–ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç OpenAI —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        print(f"üîÑ –ó–∞–ø—Ä–æ—Å –∫ OpenAI: '{question}'")
        
        start_time = time.time()
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system", 
                    "content": "–¢—ã –º–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –º–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∏ —Å —é–º–æ—Ä–æ–º. –ú–∞–∫—Å–∏–º—É–º 20 —Å–ª–æ–≤. –§–æ—Ä–º–∞—Ç: –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ + —ç–º–æ–¥–∑–∏."
                },
                {"role": "user", "content": question}
            ],
            max_tokens=60,
            temperature=0.9
        )
        
        answer = response.choices[0].message.content.strip()
        response_time = time.time() - start_time
        
        print(f"‚úÖ OpenAI –æ—Ç–≤–µ—Ç–∏–ª –∑–∞ {response_time:.2f}—Å: '{answer}'")
        return answer
        
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {str(e)}"
        print(error_msg)
        return "–í—Å–µ–ª–µ–Ω–Ω–∞—è –º–æ–ª—á–∏—Ç... –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ. üîÆ"

def set_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –¥–ª—è Telegram"""
    if WEBHOOK_URL:
        try:
            bot.remove_webhook()
            time.sleep(1)
            bot.set_webhook(url=f"{WEBHOOK_URL}/webhook")
            print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}/webhook")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")

if __name__ == '__main__':
    print("=" * 50)
    print("üîÆ –ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
    print("üåê –¢–∏–ø: Web Service")
    print("üîê –¢–æ–∫–µ–Ω—ã: –ü–†–û–í–ï–†–ï–ù–´")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º OpenAI –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    openai_ok = test_openai_connection()
    print(f"ü§ñ OpenAI: {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if openai_ok else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω URL
    if WEBHOOK_URL:
        set_webhook()
        print("‚úÖ –†–µ–∂–∏–º: Webhook")
    else:
        print("‚úÖ –†–µ–∂–∏–º: Long Polling")
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def start_polling():
            while True:
                try:
                    print("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º polling...")
                    bot.polling(none_stop=True, interval=1, timeout=60)
                except Exception as e:
                    print(f"üí• –û—à–∏–±–∫–∞ polling: {e}")
                    time.sleep(10)
        
        polling_thread = threading.Thread(target=start_polling, daemon=True)
        polling_thread.start()
    
    print("‚úÖ –°—Ç–∞—Ç—É—Å: –ó–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port, debug=False)
