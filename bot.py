import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import time
import random
import os
import requests
import threading
from flask import Flask

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –¥–ª—è Web Service
app = Flask(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
HF_API_TOKEN = os.getenv('HF_API_TOKEN')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
if not BOT_TOKEN:
    print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    exit(1)

print(f"‚úÖ BOT_TOKEN: {BOT_TOKEN[:10]}...{BOT_TOKEN[-5:] if len(BOT_TOKEN) > 15 else ''}")
print(f"‚úÖ HF_API_TOKEN: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if HF_API_TOKEN else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")

bot = telebot.TeleBot(BOT_TOKEN)

YES_NO_BASE = [
    '–î–∞, –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ! ‚ú®',
    '–ù–µ—Ç, –Ω–µ —Å—É–¥—å–±–∞. üòî', 
    '–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–¥–æ–∂–¥–∏. ‚è≥',
    '–ê–±—Å–æ–ª—é—Ç–Ω–æ –≤–µ—Ä–Ω–æ! üëç',
    '–°–∫–æ—Ä–µ–µ –Ω–µ—Ç. ‚ùå',
    '–í–µ—Ä–æ—è—Ç–Ω–æ –¥–∞! üòä',
    '–ù–µ –∑–Ω–∞—é, –Ω–æ –≤–µ—Ä—é –≤ —Ç–µ–±—è. ‚ù§Ô∏è'
]

user_locks = {}

def get_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    button = KeyboardButton('üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –≤—Å–µ–ª–µ–Ω–Ω—É—é')
    markup.add(button)
    return markup

def get_huggingface_prediction(question):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Hugging Face"""
    if not HF_API_TOKEN:
        print("‚ùå HF_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return random.choice(YES_NO_BASE)
    
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏
        models = [
            "microsoft/DialoGPT-medium",
            "microsoft/DialoGPT-large", 
            "gpt2",
            "facebook/blenderbot-400M-distill"
        ]
        
        API_URL = f"https://api-inference.huggingface.co/models/{models[0]}"
        headers = {"Authorization": f"Bearer {HF_API_TOKEN}"}
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        prompt = f"""–¢—ã - –º–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π. –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –∏ –º–∏—Å—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å.
–í–æ–ø—Ä–æ—Å: {question}
–û—Ç–≤–µ—Ç:"""
        
        payload = {
            "inputs": prompt,
            "parameters": {
                "max_length": 80,
                "temperature": 0.9,
                "do_sample": True,
                "return_full_text": False,
                "repetition_penalty": 1.2
            },
            "options": {
                "wait_for_model": True,
                "use_cache": True
            }
        }
        
        print(f"üîÑ –ó–∞–ø—Ä–æ—Å –∫ Hugging Face: '{question}'")
        response = requests.post(API_URL, headers=headers, json=payload, timeout=45)
        
        print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Raw –æ—Ç–≤–µ—Ç Hugging Face: {result}")
            
            if isinstance(result, list) and len(result) > 0:
                answer = result[0]['generated_text'].strip()
                # –ß–∏—Å—Ç–∏–º –æ—Ç–≤–µ—Ç
                if prompt in answer:
                    answer = answer.replace(prompt, '').strip()
                if answer and len(answer) > 5:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
                    print(f"üéØ –û—á–∏—â–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: '{answer}'")
                    return answer
            
            print("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò")
            return random.choice(YES_NO_BASE)
            
        else:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}"
            print(error_msg)
            return random.choice(YES_NO_BASE)
            
    except Exception as e:
        error_msg = f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ Hugging Face: {str(e)}"
        print(error_msg)
        return random.choice(YES_NO_BASE)

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    user_locks[user_id] = 0
    bot.send_message(
        message.chat.id, 
        "üîÆ *–ü—Ä–∏–≤–µ—Ç! –Ø –º–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π!*\n\n–ó–∞–¥–∞–π –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –æ—Ç–∫—Ä–æ—é —Ç–∞–π–Ω—ã –≤—Å–µ–ª–µ–Ω–Ω–æ–π!\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å.", 
        parse_mode='Markdown', 
        reply_markup=get_keyboard()
    )

@bot.message_handler(commands=['test_ai'])
def test_ai(message):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ò–ò"""
    test_questions = [
        "–Ø –Ω–∞–π–¥—É –ª—é–±–æ–≤—å –≤ —ç—Ç–æ–º –≥–æ–¥—É?",
        "–°—Ç–æ–∏—Ç –ª–∏ –º–Ω–µ –º–µ–Ω—è—Ç—å —Ä–∞–±–æ—Ç—É?", 
        "–ß—Ç–æ –≤—Å–µ–ª–µ–Ω–Ω–∞—è –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ –¥–ª—è –º–µ–Ω—è?",
        "–ö–∞–∫–æ–π —Å–µ–∫—Ä–µ—Ç —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–∫—Ä—ã—Ç—å?",
        "–í —á–µ–º –º–æ–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ?"
    ]
    
    question = random.choice(test_questions)
    bot.send_message(message.chat.id, f"üîç *–¢–µ—Å—Ç–∏—Ä—É–µ–º –ò–ò...*\n–í–æ–ø—Ä–æ—Å: _{question}_", parse_mode='Markdown')
    
    time.sleep(2)
    
    answer = get_huggingface_prediction(question)
    bot.send_message(message.chat.id, f"ü§ñ *–û—Ç–≤–µ—Ç –ò–ò:* {answer}", parse_mode='Markdown')
    
    print(f"üß™ –¢–µ—Å—Ç –ò–ò: '{question}' ‚Üí '{answer}'")

@bot.message_handler(commands=['debug'])
def debug_info(message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    info = f"""
üîß *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:*
‚Ä¢ ü§ñ Hugging Face: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if HF_API_TOKEN else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}
‚Ä¢ üîÆ –†–µ–∂–∏–º: Web Service
‚Ä¢ üìç –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω

*–¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ò–ò:*
1. "–Ø –Ω–∞–π–¥—É –ª—é–±–æ–≤—å?"
2. "–ß—Ç–æ –∂–¥–µ—Ç –º–µ–Ω—è –∑–∞–≤—Ç—Ä–∞?"
3. "–°—Ç–æ–∏—Ç –ª–∏ —Ä–∏—Å–∫–Ω—É—Ç—å?"
4. "–ö–∞–∫–æ–π —Å–µ–∫—Ä–µ—Ç –≤—Å–µ–ª–µ–Ω–Ω–æ–π?"
5. "–í —á–µ–º –º–æ–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ?"
    """
    bot.send_message(message.chat.id, info, parse_mode='Markdown')

@bot.message_handler(commands=['status'])
def status_check(message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
    status_msg = f"""
üîÆ *–°—Ç–∞—Ç—É—Å –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ —à–∞—Ä–∞:*
‚Ä¢ ü§ñ AI: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if HF_API_TOKEN else '‚ùå –¢–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã'}
‚Ä¢ ‚ö° –°–µ—Ä–≤–µ—Ä: üü¢ –†–∞–±–æ—Ç–∞–µ—Ç
‚Ä¢ üéØ –ì–æ—Ç–æ–≤ –∫ –≤–æ–ø—Ä–æ—Å–∞–º: ‚úÖ –î–∞

*–ü–æ–ø—Ä–æ–±—É–π —Å–ø—Ä–æ—Å–∏—Ç—å:*
"–ß—Ç–æ –∂–¥–µ—Ç –º–µ–Ω—è —Å–µ–≥–æ–¥–Ω—è?"
"–°—Ç–æ–∏—Ç –ª–∏ –¥–æ–≤–µ—Ä—è—Ç—å –∏–Ω—Ç—É–∏—Ü–∏–∏?"
"–ö–∞–∫–æ–π —Å–æ–≤–µ—Ç –¥–∞—Å—Ç –≤—Å–µ–ª–µ–Ω–Ω–∞—è?"
    """
    bot.send_message(message.chat.id, status_msg, parse_mode='Markdown')

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.from_user.id
    current_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞
    if user_id in user_locks and current_time - user_locks[user_id] < 10:
        remaining = int(10 - (current_time - user_locks[user_id]))
        bot.send_message(message.chat.id, f"‚è≥ *–ü–æ–¥–æ–∂–¥–∏ –µ—â–µ {remaining} —Å–µ–∫...*", parse_mode='Markdown')
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
    if message.text == 'üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –≤—Å–µ–ª–µ–Ω–Ω—É—é':
        question = "–ß—Ç–æ —à–µ–ø–Ω—ë—Ç –≤—Å–µ–ª–µ–Ω–Ω–∞—è —Å–µ–≥–æ–¥–Ω—è?"
    else:
        question = message.text
    
    user_locks[user_id] = current_time
    
    # –¢—Ä—è—Å–µ–º —à–∞—Ä
    bot.send_message(message.chat.id, "üîÆ *–¢—Ä—è—Å—ë–º —à–∞—Ä... –î–µ—Ä–∂–∏—Å—å! –®-—à-—à...* üîÆ", parse_mode='Markdown')
    time.sleep(2)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
    word_count = len(question.split())
    if word_count <= 7 and random.random() > 0.3:
        answer = random.choice(YES_NO_BASE)
        print(f"üé≤ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç: {answer}")
    else:
        answer = get_huggingface_prediction(question)
        print(f"ü§ñ AI –æ—Ç–≤–µ—Ç: {answer}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    bot.send_message(message.chat.id, f"üîÆ *{answer}* üîÆ", parse_mode='Markdown')
    time.sleep(1)
    bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É! üöÄ", reply_markup=get_keyboard())

# Flask –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è Web Service
@app.route('/')
def home():
    return """
    <html>
        <head>
            <title>–ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π</title>
            <style>
                body { 
                    font-family: Arial, sans-serif; 
                    max-width: 800px; 
                    margin: 0 auto; 
                    padding: 20px; 
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                }
                .container { 
                    background: rgba(255,255,255,0.1); 
                    padding: 30px; 
                    border-radius: 15px; 
                    backdrop-filter: blur(10px);
                }
                h1 { text-align: center; }
                .status { 
                    background: rgba(255,255,255,0.2); 
                    padding: 15px; 
                    border-radius: 10px; 
                    margin: 10px 0; 
                }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üîÆ –ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π</h1>
                <div class="status">
                    <p><strong>–°—Ç–∞—Ç—É—Å:</strong> üü¢ –ê–∫—Ç–∏–≤–µ–Ω</p>
                    <p><strong>Telegram –±–æ—Ç:</strong> ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç</p>
                    <p><strong>AI –ú–æ–¥–µ–ª—å:</strong> ü§ñ Hugging Face</p>
                    <p><strong>–†–µ–∂–∏–º:</strong> Web Service + Long Polling</p>
                </div>
                <p>–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –∏ –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –≤ Telegram!</p>
                <p>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Telegram –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ.</p>
            </div>
        </body>
    </html>
    """

@app.route('/health')
def health_check():
    return {'status': 'healthy', 'service': 'magic8ball-bot', 'timestamp': time.time()}

@app.route('/test')
def test_huggingface():
    """–¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Hugging Face"""
    try:
        test_question = "–ß—Ç–æ –∂–¥–µ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ –≤ –±—É–¥—É—â–µ–º?"
        answer = get_huggingface_prediction(test_question)
        return {
            'question': test_question,
            'answer': answer,
            'ai_working': 'hugging_face' not in answer.lower() and answer not in YES_NO_BASE
        }
    except Exception as e:
        return {'error': str(e)}

def start_bot_polling():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    print("üîÆ –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞...")
    while True:
        try:
            bot.polling(none_stop=True, interval=1, timeout=60)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
            time.sleep(10)

if __name__ == '__main__':
    print("=" * 60)
    print("üîÆ –ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
    print("üåê –¢–∏–ø: Web Service")
    print("ü§ñ Hugging Face: ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if HF_API_TOKEN else "ü§ñ Hugging Face: ‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    print("üéØ –°—Ç–∞—Ç—É—Å: –ó–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=start_bot_polling, daemon=True)
    bot_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä
    port = int(os.environ.get('PORT', 10000))
    print(f"üåç Web —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host='0.0.0.0', port=port, debug=False)
