import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import time
import random
import os
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.getenv('BOT_TOKEN')
HF_API_TOKEN = os.getenv('HF_API_TOKEN')

if not BOT_TOKEN:
    print("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    exit(1)

print("üîÆ –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä...")
print(f"ü§ñ Hugging Face: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if HF_API_TOKEN else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")

bot = telebot.TeleBot(BOT_TOKEN)

YES_NO_BASE = [
    '–î–∞, –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ! ‚ú®',
    '–ù–µ—Ç, –Ω–µ —Å—É–¥—å–±–∞. üòî', 
    '–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–¥–æ–∂–¥–∏. ‚è≥',
    '–ê–±—Å–æ–ª—é—Ç–Ω–æ –≤–µ—Ä–Ω–æ! üëç',
    '–°–∫–æ—Ä–µ–µ –Ω–µ—Ç. ‚ùå',
    '–í–µ—Ä–æ—è—Ç–Ω–æ –¥–∞! üòä',
    '–ù–µ –∑–Ω–∞—é, –Ω–æ –≤–µ—Ä—é –≤ —Ç–µ–±—è. ‚ù§Ô∏è'
]

user_locks = {}

def get_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    button = KeyboardButton('üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –≤—Å–µ–ª–µ–Ω–Ω—É—é')
    markup.add(button)
    return markup

def test_huggingface_detailed():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç Hugging Face"""
    if not HF_API_TOKEN:
        return "‚ùå –¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    try:
        API_URL = "https://api-inference.huggingface.co/models/gpt2"
        headers = {"Authorization": f"Bearer {HF_API_TOKEN}"}
        
        payload = {
            "inputs": "Say hello",
            "parameters": {"max_length": 10}
        }
        
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º Hugging Face API...")
        response = requests.post(API_URL, headers=headers, json=payload, timeout=30)
        
        print(f"üì° HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text[:200]}")
        
        if response.status_code == 200:
            result = response.json()
            return f"‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç! –û—Ç–≤–µ—Ç: {result}"
        elif response.status_code == 401:
            return "‚ùå –û—à–∏–±–∫–∞ 401: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω API"
        elif response.status_code == 404:
            return "‚ùå –û—à–∏–±–∫–∞ 404: –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        elif response.status_code == 503:
            return "üîÑ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è... –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ 1-2 –º–∏–Ω—É—Ç—ã"
        else:
            return f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}"
            
    except Exception as e:
        return f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"

def get_ai_prediction(question):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è AI —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    if not HF_API_TOKEN:
        print("‚ùå HF_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return random.choice(YES_NO_BASE)
    
    try:
        API_URL = "https://api-inference.huggingface.co/models/gpt2"
        headers = {"Authorization": f"Bearer {HF_API_TOKEN}"}
        
        prompt = f"Q: {question} A:"
        payload = {
            "inputs": prompt,
            "parameters": {"max_length": 50, "temperature": 0.8}
        }
        
        print(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å: '{question}'")
        response = requests.post(API_URL, headers=headers, json=payload, timeout=30)
        
        print(f"üì° –°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"üìä Raw –æ—Ç–≤–µ—Ç: {result}")
            
            if isinstance(result, list) and len(result) > 0:
                answer = result[0]['generated_text'].strip()
                if prompt in answer:
                    answer = answer.replace(prompt, '').strip()
                if answer and len(answer) > 3:
                    print(f"‚úÖ AI –æ—Ç–≤–µ—Ç–∏–ª: '{answer}'")
                    return answer
        
        print("‚ùå AI –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç")
        return random.choice(YES_NO_BASE)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return random.choice(YES_NO_BASE)

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    user_locks[user_id] = 0
    bot.send_message(
        message.chat.id, 
        "üîÆ *–ü—Ä–∏–≤–µ—Ç! –Ø –º–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä!*\n\n–ò—Å–ø–æ–ª—å–∑—É–π /diagnostic –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ AI", 
        parse_mode='Markdown', 
        reply_markup=get_keyboard()
    )

@bot.message_handler(commands=['diagnostic'])
def diagnostic(message):
    """–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"""
    bot.send_message(message.chat.id, "üîß *–ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É...*", parse_mode='Markdown')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    token_status = "‚úÖ –¢–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if HF_API_TOKEN else "‚ùå –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
    api_status = test_huggingface_detailed()
    
    diagnostic_info = f"""
üîß *–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê AI:*

*–¢–æ–∫–µ–Ω Hugging Face:*
{token_status}

*API —Å—Ç–∞—Ç—É—Å:*
{api_status}

*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*
1. –ü—Ä–æ–≤–µ—Ä—å HF_API_TOKEN –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Render
2. –£–±–µ–¥–∏—Å—å —á—Ç–æ —Ç–æ–∫–µ–Ω –∞–∫—Ç–∏–≤–µ–Ω –≤ Hugging Face
3. –ü–æ–ø—Ä–æ–±—É–π —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
    """
    
    bot.send_message(message.chat.id, diagnostic_info, parse_mode='Markdown')

@bot.message_handler(commands=['test'])
def test(message):
    """–¢–µ—Å—Ç AI"""
    bot.send_message(message.chat.id, "üß™ *–¢–µ—Å—Ç–∏—Ä—É–µ–º AI...*", parse_mode='Markdown')
    
    answer = get_ai_prediction("Will I be happy?")
    
    if answer in YES_NO_BASE:
        bot.send_message(message.chat.id, f"‚ùå AI –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç\nü§ñ –û—Ç–≤–µ—Ç: {answer}", parse_mode='Markdown')
    else:
        bot.send_message(message.chat.id, f"‚úÖ AI –†–ê–ë–û–¢–ê–ï–¢!\nü§ñ –û—Ç–≤–µ—Ç: {answer}", parse_mode='Markdown')

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.from_user.id
    current_time = time.time()
    
    if user_id in user_locks and current_time - user_locks[user_id] < 10:
        remaining = int(10 - (current_time - user_locks[user_id]))
        bot.send_message(message.chat.id, f"‚è≥ –ü–æ–¥–æ–∂–¥–∏ {remaining} —Å–µ–∫...", parse_mode='Markdown')
        return
    
    if message.text == 'üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –≤—Å–µ–ª–µ–Ω–Ω—É—é':
        question = "What will happen today?"
    else:
        question = message.text
    
    user_locks[user_id] = current_time
    
    bot.send_message(message.chat.id, "üîÆ –î—É–º–∞—é...", parse_mode='Markdown')
    time.sleep(1)
    
    answer = get_ai_prediction(question)
    bot.send_message(message.chat.id, f"üîÆ {answer}", parse_mode='Markdown')

if __name__ == '__main__':
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")
    bot.polling(none_stop=True)
